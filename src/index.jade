doctype html
html
  head
    meta(charset='utf-8')
    meta(name='viewport', content='width=device-width, initial-scale=1, maximum-scale=1')
    title Unboxing Flexbox

    link(rel='stylesheet', type='text/css', href='build/build.css')

  body

    article.transition-subtle

      section.layout-title
        h1 Unboxing 
          strong Flexbox

        h2 
          | <a href="https://twitter.com/NouranMhmoud" class="author">Nouran Mahmoud</a>, Frontend Engineer at <b>Cognitev</b>

      section.layout-section-header
        h2(style="height:auto;width:auto;background-color:white;margin-bottom:40px") Outlines
        
        .content(style="width:auto")
          ul
            li Why Flexbox is a Life-saver
            li Flex Browsers Support
            li Flex Outdated Stuff.
            li Flex Layout Box Model and Terminology
            li Responsive Design with Flexbox
            li Flexbox USE CASES

      section.layout-main-point(data-bespoke-state='layout-main-point')
        h1.bullet Why Flexbox is a Life-saver

      section.layout-regular
        h3.bullet Once upon a time...
        img(src="/images/onceUponAtime.gif")
      
      section
        h3 Hakon Wium Lie
        img(src="/images/hackon.png" style="width:25%; height:80%")

      section
        h3 Eric Meyer
        img(src="/images/eric.png", style="width:40%; height:80%")
      
      section
        h3.bullet Box Acid Test By Todd Fahrner
        img(src="/images/box-acid-text.png", style="width:70%; height:80%")

      section
        h3.bullet Float Main Purpose
        img(src="/images/float-answer.png", style="width:70%; height:80%")
      
      section
        p.bullet <strong>**CSS**</strong> is a language for describing the rendering of structured documents (such as HTML and XML) on screen, on paper, in speech, etc. - <a href="http://w3.org">CSS working group w3.org</a>
        p.bullet CSS Levels 1 and 2 allowed for the <strong>alignment of text</strong> via <strong>text-align</strong> and the <strong>alignment of blocks</strong> by balancing <strong>auto margins</strong>.

      section
        img(src="/images/css.gif", style="width:300px;height:300px")

      section
        h2.bullet CSS Four layout mode
        
        ul  
          li <strong>block layout</strong> for laying out documents
          li <strong>inline layout</strong> for laying out text
          li <strong>table layout</strong> for laying 2D tabular data
          li <strong>positioned layout</strong> (floot, relative, absolute ..)

      section
        h3 Problems with CSS 2 layout
        ul
          li Float containment 
          li Wrapping hard to control 
          li Difficulty making boxes equal height 
          li Difficulty doing vertical centering 
          li Difficulty mixing units of measurement 
          li Visual location still tied to HTML order

      section
        h2.bullet CSS3 two new layout methods

        ul
          li <strong>Grid layout</strong> divides space into columns & rows. Like table layouts, but better!.
          li <strong>Flexbox layout</strong> distributes space along a single column or row. Like float layouts, but better!.
          li Flexbox and Grid were created explicitly to replace float and table layout hacks.
          li <a href="https://github.com/tabatkins">Tab Atkins Jr.</a>, author of the Flexbox and Grid specs

      section
        h3  Flexbox solves a lot of those issues
        ul
          li Make boxes automatically grow to fill space or shrink to avoid overflow 
          li Give boxes proportional measurements 
          li Lay out boxes in any direction 
          li Align boxes on any side
          li Place boxes out of order from HTML

      section.layout-main-point(data-bespoke-state='layout-main-point')
        h1.bullet Flex browsers support
        img(src="/images/browser-support.gif")

      section
        h3 3 Flexbox Specs and Outdated Stuff.
        ul
          li <strong>The old 2009</strong> spec — display: box — is no longer relevant.
          li <strong>The 2011 "tweener"</strong> spec — display: flexbox — was a draft spec, only implemented in IE10. You should avoid it if possible.
          li <strong>The final 2012</strong> spec — display: flex — is the new hotness, with excellent browser support (see following image).

        p.bullet > If you see anything other than display:flex, it’s an older article and can be ignored.

      section
        ul
          li Is supported by (almost) all modern browsers
          li Firefox 28+
          li Chrome 29+
          li Internet Explorer 11+ (IE10 also supports Flexbox, but uses the tweener spec (display:flexbox).)
          li Opera 17+
          li Safari 6.1+ requires -webkit prefix

      section
        h3.bullet <a href="http://caniuse.com/">Can I Use</a>
        img.bullet(src="/images/caniuse.png", style="height:400px;width:100%")

      section
        h2 What About Older <b>IE Versions</b>? WHO CARES?
        img.bullet(src="/images/disaster-girl.jpg")

      section.layout-2-column-content
        div.bullet(style="width:400px")
          h3 MODERNIZR
          p a feature detection tool, allows us to detect if a browser supports flexbox (legacy and current)
          pre
            code.language-css.
              .no-flexbox.no-flexboxlegacy {
                /* fallback */
              }

        div.bullet(style="width:500px;margin-left: 100px;") 
          h3 AUTOPREFIXER 
            span(style="font-size:16px") (Vendor Prefixes)
          p If you need to support all these older implementations, you’ll need a host of <code>*-box</code>, <code>*-flexbox</code>, and <code>*-flex</code> prefixes.
          p(style="font-size:16px") Plugins : Grunt, Gulp, Webpack, Less, Stylus, Rails
          pre
            code.language-css.
              .container {
                display: -webkit-box;
                display: -webkit-flex;
                display: -ms-flexbox;
                display: flex;
              }

      section.layout-main-point(data-bespoke-state='layout-main-point')
        h1 Flex Layout Box Model and Terminology
        p (Flex container, flex items)
        img(src="/images/bubbles.gif")

      section
        h2 Flexbox Concepts
        ul
          li <b>One level deep</b> - a flex line (parent, child)
          li <code>display: flex | inline-flex</code> (outer and inner layout of parent)
          li Possiblility to <b>change the direction</b> of the flex line (<code>row, column</code>).
          li The main axis of a flex container is the primary axis along which flex items are laid out.
          li <b>Floats do not intrude</b> into the flex container
          li Flex container’s <b>margins do not collapse</b> with the margins of its contents

      section
        h3 One level deep
        img(src="/images/one-level.png")
        
      section
        h2 Main Axis, Cros Axis
        img(src="/images/axis.png")
        p(style="font-size:16px") Figure from <a href="https://dev.opera.com/articles/flexbox-basics/">this article</a>
      
      section
        h3.bullet The Flex Container Properties

        ul.bullet
          li Flex-direction
          li Flex-wrap
          li Flex-flow
          li Justify-content
          li Align-items
          li Align-content

      section
        h3.bullet The Flex Item Properties
        ul.bullet
          li Order 
          li Flex-grow 
          li Flex-shrink 
          li Flex-basis

      section
        h2 Single Line of Flex
        
        pre
          code.language-css.
            .flex-container {
                display: flex;
            }
        img(src="/images/clap.gif")
      
      section
        h3 display: flex
        img(src="/images/flex.png", style="width:70%; height:30%")
        h3(style="margin-top:40px") display: inline-flex
        img(src="/images/inline-flex.png", style="width:70%; height:30%")
      section
        h3 That one line of code does all the following
        ul
          li Treats <code>.flex-container</code> as a flex container.
          li Treats all direct children of <code>.flex-container</code> as flex items.
          li Flex items will be laid out in a horizontal line (<code>flex-direction:row</code>).
          li Flex items will be laid out in source order(<code>order: 0</code>).
          li Flex items will be laid out starting from the left side of the flex container(<code>justify-content:flex-start</code>).
          li Flex items will be sized based on their regular width properties(<code>width: auto;</code>).
          li If there’s not enough space for all the flex items, they will be allowed to shrink horizontally until they all fit(<code>flex-shrink:1</code>).
          li If they need to shrink, each item will shrink equally(<code>flex-shrink:1</code>).
          li Flex items will all stretch vertically to match the height of the tallest flex item(<code>align-items:stretch</code>).

          div.demo
            a(href="http://the-echoplex.net/flexyboxes/?fixed-height=on&display=flex&flex-direction=row&flex-wrap=nowrap&justify-content=flex-start&align-items=stretch&align-content=stretch&order%5B%5D=0&flex-grow%5B%5D=0&flex-shrink%5B%5D=1&flex-basis%5B%5D=auto&align-self%5B%5D=auto&order%5B%5D=0&flex-grow%5B%5D=0&flex-shrink%5B%5D=1&flex-basis%5B%5D=auto&align-self%5B%5D=auto&order%5B%5D=0&flex-grow%5B%5D=0&flex-shrink%5B%5D=1&flex-basis%5B%5D=auto&align-self%5B%5D=auto") Show Example

      section
        h3 justify-content
        img(src="/images/flexbox-justify.png")

      section
        h3 flex-wrap
        img(src="/images/flexbox-wrap.png")

      section
        h3 order
        img(src="/images/flexbox-order.png")   


      section(data-bespoke-state='emphatic')
        h2 Start Playing with Flexbox
        a(href="http://the-echoplex.net/flexyboxes/?fixed-height=on&display=flex&flex-direction=row&flex-wrap=wrap&justify-content=center&align-items=stretch&align-content=stretch&order%5B%5D=0&flex-grow%5B%5D=1&flex-shrink%5B%5D=1&flex-basis%5B%5D=auto&align-self%5B%5D=auto&order%5B%5D=0&flex-grow%5B%5D=1&flex-shrink%5B%5D=1&flex-basis%5B%5D=auto&align-self%5B%5D=auto&order%5B%5D=0&flex-grow%5B%5D=1&flex-shrink%5B%5D=1&flex-basis%5B%5D=auto&align-self%5B%5D=auto&order%5B%5D=0&flex-grow%5B%5D=1&flex-shrink%5B%5D=1&flex-basis%5B%5D=auto&align-self%5B%5D=auto&order%5B%5D=1&flex-grow%5B%5D=1&flex-shrink%5B%5D=1&flex-basis%5B%5D=auto&align-self%5B%5D=auto&order%5B%5D=0&flex-grow%5B%5D=1&flex-shrink%5B%5D=1&flex-basis%5B%5D=auto&align-self%5B%5D=auto") Click here!

        p
          a(href="https://flexboxfroggy.com/") Froggy Game
      
      section.layout-main-point(data-bespoke-state='layout-main-point')
        h1  Responsive Design with Flexbox
        img(src="/images/responsive.gif")

      section.layout-2-column-content
        div.bullet
          p <strong>Space</strong> <br/> Make better use of the space at all screen sizes
          ul
            li flex (flex-grow flex-shrink flex-basis)
            li justify-content: space-between/space-around
            li align-items
            li align-content
        
        div.bullet(style="width:100%")
          p <strong>Placement</strong> <br/> Re-order content at different screen sizes
          ul
            li order
            li flex-direction

      section
        p.bullet No need for <code>width:100%</code>, use <code>flex: 1 1 100%</code> instead.
        p.bullet Combining units of measurement across a line can make RWD tricky. ems + % + px + [blank] = ???
        p.bullet Defining the flex property Makes flex items change their main size (width or height) to fit available space
      
      section
        h1 USE CASES

      section
        h2 solved by flexbox
        img(src="/images/showcases.png", style="width:70%; height:80%")
      section
        h1.bullet Thank you <span class='bullet'>:)</span>
        img(src='http://i.imgur.com/xmBjXcm.gif')

    script(src='build/build.js')